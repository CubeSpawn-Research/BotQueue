v2 Release - October 2012

* Slice Engines UI
  * replace start/end/config with file upload and inline editing (single text area)
  * on edit of slice profile, show option to expire previously sliced jobs w/ this profile.

* Miscellaneous stuff
  * update time statistics to include slicing
  * update status html to include slicing
  * fix up the file view page to make it prettier.
  * when downloading file to slice, status should be "downloading"
  
* WEB - Pull in files from internet (Thingiverse, GrabCAD, etc)

* API - implement job creation via URL download
* API - implement job creation via HTTP file POST
* API - Add computer name / id to app approval so we can show that on app page... remove access token for a certain computer.
* API - Add callback url support for web-based apps

* BUMBLEBEE - Better / faster shutdown

* WEB - better client installation documentation
* WEB - replace all appropriate form controls with new form helper class.
* WEB - protect sql calls from db injection attacks

------------------------------------------------------------------------------------

v3 Release - Nov 2012

WEBSITE 

* WEB - Single unified queue view w/ auto-update
  * combine queue page into single list of all open jobs w/ tabs to limit based on job status

* WEB - Allow canceling of print jobs through website.
  * similar error flow to QA failure
  * Prereq: websockets server

* WEB - Allow pausing / resuming through website

* WEB - bot current status / mini-dashboard with machine vitals such as temp.

* API - Websockets server
  * define events to pass to clients
  * subscribe to bots, jobs, or user?
  * use autobahn or tornado for python side.
  
* CLIENT - support for websockets for realtime comms

------------------------------------------------------------------------------------

Long term wants:

WEBCAM SUPPORT

* use 'motion' to control multiple webcams to post files to the botqueue website.
  * http://www.chriswpage.com/2009/05/setup-an-advanced-webcam-security-system-with-ubuntu-8-04-and-motion/
  * http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome
  * automatically create a timelapse at the end of a successful print - watch your object grow
    * timelapse interval should be calculated to last an exact time... 10 seconds or so.
    * also record the user removing the part - 5 seconds? -- this adds authenticity and a human touch.
    * bonus: you can trigger on motion once print is complete!
  * to save on space required to hold a ton of images, continuously overwrite the same file.  then just show that to the user.
    * what interval?  1 minute?
    * make sure each image is timestamped.
    * and watermarked with the host url.

* add filament_volume field to slicejob or job

* WEB - multi-job prints (eg: .zip file w/ manifest)

* WEB - print grouping using slic3r
  * modify jobs to add allow_grouping file
  * look at job grabbing to allow multiple jobs to be grabbed
  * look at bumblebee to allow multiple jobs to be grabbed
  * add option to allow job to be grouped into a single print
  * modify code to use slic3r --merge to create build plate.
  * create high-level job group to hold currently running jobs?

* WEB - Reduce Amazon requirements for non-amazon / non-public installs.
* WEB - Public queue support
* WEB - Webcam support
* WEB - full page statistics for bot / queue with graphs

* BUMBLEBEE - new machine discovery
  * python - how to list serial ports?
    * linux: how to uniquely identify each driver (lsusb -v and iSerial)
      * http://stackoverflow.com/questions/5421008/how-to-uniquely-identify-two-identical-usb-serial-adapters-in-linux
	* If new machines are found, it will prompt the user to register them.
	* Allow user to manually add new machines & configure them (serial port, speed, etc)
* BUMBLEBEE - s3g python library for MakerBot machines
* BUMBLEBEE - GUI App?
	High-level views:
		Dashboard: all bots w/ current status and active jobs.
		Add Bot: configure local bot settings (drivers, name, etc)
		Bot Detail:
			* all info available on this bot
			* current print status
			* pause print
			* cancel print
			* toggle bot status: online/offline/fixed/broken
	* Use python+webkit for UI
* WEB - simple script for installing botqueue onto a standalone ubuntu machine
* WEB - 100% working Amazon bootup script.