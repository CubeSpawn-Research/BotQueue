v0.4 Release - Online Bot Config!

* BUMBLEBEE - linux webcam detection.
* WEB - fix register bot section.
* WEB - update help docs with new configuration setup.

------------------------------------------------------------------------------------

v0.4 - CHANGELOG

* BUMBLEBEE - report local IP address
* WEB - record local and remote IP when getting bot updates
* WEB - show IP addresses on bot view page
* WEB - added 30 day list to leaderboards
* WEB - bulk create multi-job prints from an uploaded .zip file
* WEB - add support for .zip files to file view page
* WEB - add support for showing parent files to job page
* WEB - pull in all files from thingiverse.com/thing:#### style urls
* WEB - add 'bump' feature to move a job to the top of the queue
* WEB - record client name and version when updating bot status.
* BUMBLEBEE - headless app authentication support - based on IP
  * WEB - show all apps requesting access from your current IP.
  * WEB - if you're on the same IP, high likelihood its your bot
  * WEB - remote address is pretty tough to fake too.
* WEB - add name info to app registration
* WEB - Remove access token for a certain app.
* WEB - Implement getmybots api call
* WEB - Implement botscanresults api call
* BUMBLEBEE - new machine discovery
  * python - how to list serial ports?
    * linux: how to uniquely identify each driver (lsusb -v and iSerial)
      * http://stackoverflow.com/questions/5421008/how-to-uniquely-identify-two-identical-usb-serial-adapters-in-linux
	* If new machines are found, it will prompt the user to register them.
* Allow user to manually add new machines & configure them (serial port, speed, etc)
* BUMBLEBEE - send list of serial ports and webcams to site for bot configuration.
* BUMBLEBEE - pull list of bots + config from web directly
* WEB - ability to assign each bot to an app.
* WEB - online editing of bot configs.
* BUMBLEBEE - add contrast and brightness configuration settings to webcam
* WEB - add contrast and brightness configuration settings to driver config
* WEB - prevent editing of driver unless bot is offline, idle, error, or qa
* WEB - fixed error with field size for storing temperature logs.
* BUMBLEBEE - update worker thread when config changes.
* BUMBLEBEE - stop worker thread when bot is removed from our list.
* BUMBLEBEE - don't show bot list until we've scanned devices.

------------------------------------------------------------------------------------

v0.5 - Timelapses + On-Deck Jobs

WEBCAM STUFF
* automatically create a timelapse at the end of a successful print - watch your object grow
  * timelapse interval should be calculated to last an exact time... 10 seconds or so.
* keep all images from webcam on error jobs - forensic viewing of failed jobs.
  * automatically delete after 1 day.
* synchronize temp readings + picture - then synchronize images w/ temperatures on bot view page
* ffmpeg + x264 install: http://ffmpeg.org/trac/ffmpeg/wiki/UbuntuCompilationGuide
* potential video player: http://videojs.com/
* ffmpeg timelapse from images: http://tatica.org/en/2013/02/15/timelapse/
* more timelapse commands: http://poohbot.com/2009/09/25/ffmpeg-for-time-lapse-sets-of-images-and-even-archiving/
* this will likely require a background worker on amazon to generate the videos

* Create on-deck system to allow jobs to be pre-sliced by either the pi or by workers in the cloud
* Modify bumblebee to download on-deck jobs for quick printing after last job has been completed.

------------------------------------------------------------------------------------

v0.6 - Websockets

* API - Websockets server
  * define events to pass to clients
  * subscribe to bots, jobs, or user?
  * use autobahn or tornado for python side.
  
* CLIENT - support for websockets for realtime comms w/ server

* WEB - websocket client w/ transparent high bandwidth connection to local machines.
* WEB - control panel for controlling various machine parameters

------------------------------------------------------------------------------------

Long term wants:

* WEB - when downloading file to slice, status should be "downloading"
* BUMBLEBEE - send status updates during download.
* WEB - Single unified queue view w/ auto-update
  * combine queue page into single list of all open jobs w/ tabs to limit based on job status
* WEB - add diff of slicer configs to slicejob page (current vs snapshot)

* WEB - create page to show live shots from currently printing public bots or just shots from completed jobs

* WEB - filament spool info (it keeps track of how big each machine spool is/when a new one is installed and appoximates how much is left based on volume info in gcode)
  * PREREQUISITE: worker bots to parse STL files for stats like volume, bounds, etc.
  
* WEB / BUMBLEBEE - a way to pre-slice jobs AKA "on-deck" functionality

* add filament_volume field to slicejob or job

* BUMBLEBEE - Better / faster shutdown

* API - Add callback url support for web-based apps

* WEB - print grouping using slic3r
  * modify jobs to add allow_grouping file
  * look at job grabbing to allow multiple jobs to be grabbed
  * look at bumblebee to allow multiple jobs to be grabbed
  * add option to allow job to be grouped into a single print
  * modify code to use slic3r --merge to create build plate.
  * create high-level job group to hold currently running jobs?

* WEB - Reduce Amazon requirements for non-amazon / non-public installs.
* WEB - Public queue support
* WEB - full page statistics for bot / queue with graphs

* BUMBLEBEE - s3g python library for MakerBot machines
* BUMBLEBEE - GUI App?
	High-level views:
		Dashboard: all bots w/ current status and active jobs.
		Add Bot: configure local bot settings (drivers, name, etc)
		Bot Detail:
			* all info available on this bot
			* current print status
			* pause print
			* cancel print
			* toggle bot status: online/offline/fixed/broken
	* Use python+webkit for UI
* WEB - simple script for installing botqueue onto a standalone ubuntu machine
* WEB - 100% working Amazon bootup script.

