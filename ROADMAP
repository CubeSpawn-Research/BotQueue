v0.4 Release - Ongoing

* WEB - Single unified queue view w/ auto-update
  * combine queue page into single list of all open jobs w/ tabs to limit based on job status

* WEB - multi-job prints (eg: .zip file w/ manifest)
  * pull in all files from thingiverse.com/thing:####

* WEB - add name info to app registration
* WEB - Remove access token for a certain app.
* WEB - ability to assign each bot to an app.
* WEB - online editing of bot configs.

* BUMBLEBEE - pull list of bots + config from web directly
* BUMBLEBEE - headless app authentication support
* BUMBLEBEE - better interactivity from main menu for controlling bots / stopping jobs / etc.
* BUMBLEBEE - download slicing applications from the web instead of bundling

WEBCAM STUFF
* automatically create a timelapse at the end of a successful print - watch your object grow
  * timelapse interval should be calculated to last an exact time... 10 seconds or so.
* keep all images from webcam on error jobs - forensic viewing of failed jobs.
  * automatically delete after 1 day.
* synchronize temp readings + picture - then synchronize images w/ temperatures on bot view page
* WEB - change main homepage to show live shots from currently printing public bots.

------------------------------------------------------------------------------------

Long term wants:

* WEB - when downloading file to slice, status should be "downloading"
* BUMBLEBEE - send status updates during download.

* WEB - filament spool info (it keeps track of how big each machine spool is/when a new one is installed and appoximates how much is left based on volume info in gcode)
* WEB / BUMBLEBEE - a way to pre-slice jobs AKA "on-deck" functionality


* API - Websockets server
  * define events to pass to clients
  * subscribe to bots, jobs, or user?
  * use autobahn or tornado for python side.
  
* CLIENT - support for websockets for realtime comms

* WEB - add diff of slicer configs to slicejob page (current vs snapshot)

* add filament_volume field to slicejob or job

* BUMBLEBEE - Better / faster shutdown

* API - Add callback url support for web-based apps

* WEB - print grouping using slic3r
  * modify jobs to add allow_grouping file
  * look at job grabbing to allow multiple jobs to be grabbed
  * look at bumblebee to allow multiple jobs to be grabbed
  * add option to allow job to be grouped into a single print
  * modify code to use slic3r --merge to create build plate.
  * create high-level job group to hold currently running jobs?

* WEB - Reduce Amazon requirements for non-amazon / non-public installs.
* WEB - Public queue support
* WEB - full page statistics for bot / queue with graphs

* BUMBLEBEE - new machine discovery
  * python - how to list serial ports?
    * linux: how to uniquely identify each driver (lsusb -v and iSerial)
      * http://stackoverflow.com/questions/5421008/how-to-uniquely-identify-two-identical-usb-serial-adapters-in-linux
	* If new machines are found, it will prompt the user to register them.
	* Allow user to manually add new machines & configure them (serial port, speed, etc)
* BUMBLEBEE - s3g python library for MakerBot machines
* BUMBLEBEE - GUI App?
	High-level views:
		Dashboard: all bots w/ current status and active jobs.
		Add Bot: configure local bot settings (drivers, name, etc)
		Bot Detail:
			* all info available on this bot
			* current print status
			* pause print
			* cancel print
			* toggle bot status: online/offline/fixed/broken
	* Use python+webkit for UI
* WEB - simple script for installing botqueue onto a standalone ubuntu machine
* WEB - 100% working Amazon bootup script.

